{"ast":null,"code":"import { NEW_GAME, SHOW_SQUARE, FLAG_SQUARE, CHANGE_MODE, GENERATE_GAME } from \"../actions/actionTypes\";\nimport { generateMines, generateNumbersArr, unhideSurroundingSquaresWithZero, isFlaggedComplete, unhideAllSurroundingSquares } from \"../../utilities/functions\";\nconst initialState = {\n  mines: [[]],\n  visible: [[]],\n  activeGame: false,\n  firstClick: false,\n  numRows: 30,\n  numColumns: 16,\n  numMines: 99,\n  gameMode: \"normal\"\n};\nexport default function reducer(state = initialState, action) {\n  var newVisible = JSON.parse(JSON.stringify(state.visible));\n\n  switch (action.type) {\n    case NEW_GAME:\n      const newMines = generateMines(state.numMines, state.numRows, state.numColumns);\n      const numbersArr = generateNumbersArr(newMines, state.numRows, state.numColumns);\n      return { ...state,\n        mines: numbersArr,\n        visible: new Array(state.numRows).fill(\"hidden\").map(() => Array(state.numColumns).fill(\"hidden\")),\n        gameMode: \"normal\",\n        activeGame: true,\n        firstClick: false\n      };\n    //on first click\n\n    case GENERATE_GAME:\n      let number = state.mines[action.row][action.cols];\n      let newMines2 = state.mines;\n\n      while (number !== 0) {\n        const newMines = generateMines(state.numMines, state.numRows, state.numColumns);\n        newMines2 = generateNumbersArr(newMines, state.numRows, state.numColumns);\n        number = newMines2[action.row][action.cols];\n      } //unhide the \"0\" patch\n\n\n      const indexSet2 = unhideSurroundingSquaresWithZero(newVisible, newMines2, action.row, action.cols, state.numRows, state.numColumns);\n\n      for (let item of indexSet2) {\n        const coords = item.split(\",\").map(x => +x);\n        newVisible[coords[0]][coords[1]] = \"show\";\n      }\n\n      return { ...state,\n        firstClick: true,\n        visible: newVisible,\n        mines: newMines2\n      };\n\n    case SHOW_SQUARE:\n      const currVisibleState = newVisible[action.row][action.cols]; //if hit a hidden mine, display all mines and set activeGame to false\n\n      if (state.mines[action.row][action.cols] === 9 && currVisibleState !== \"flag\") {\n        newVisible[action.row][action.cols] = \"show\";\n        return { ...state,\n          activeGame: false,\n          visible: newVisible\n        };\n      } //unhide current square\n\n\n      if (currVisibleState === \"hidden\") {\n        newVisible[action.row][action.cols] = \"show\";\n        const number = state.mines[action.row][action.cols]; //unhide all connecting squares with zero \n\n        if (number === 0) {\n          const indexSet = unhideSurroundingSquaresWithZero(newVisible, state.mines, action.row, action.cols, state.numRows, state.numColumns);\n\n          for (let item of indexSet) {\n            const coords = item.split(\",\").map(x => +x);\n            newVisible[coords[0]][coords[1]] = \"show\";\n          }\n        }\n      } //shortcut to unhide adjacent squares in flag mode\n\n\n      if (currVisibleState === \"show\") {\n        var currMines = JSON.parse(JSON.stringify(state.mines));\n        const currNumber = currMines[action.row][action.cols];\n\n        if (isFlaggedComplete(currNumber, newVisible, action.row, action.cols, state.numRows, state.numColumns)) {\n          const indexSet = unhideAllSurroundingSquares(newVisible, state.mines, action.row, action.cols, state.numRows, state.numColumns);\n\n          for (let item of indexSet) {\n            const coords = item.split(\",\").map(x => +x); //lose game if an incorrect cell was flagged\n\n            if (currMines[coords[0]][coords[1]] === 9) {\n              newVisible[coords[0]][coords[1]] = \"show\";\n              return { ...state,\n                activeGame: false,\n                visible: newVisible\n              };\n            }\n\n            newVisible[coords[0]][coords[1]] = \"show\";\n          }\n        }\n      }\n\n      return { ...state,\n        visible: newVisible\n      };\n\n    case FLAG_SQUARE:\n      const currVisibleState2 = newVisible[action.row][action.cols];\n      if (currVisibleState2 === \"show\") newVisible[action.row][action.cols] = \"show\";\n      if (currVisibleState2 === \"hidden\") newVisible[action.row][action.cols] = \"flag\";\n      if (currVisibleState2 === \"flag\") newVisible[action.row][action.cols] = \"hidden\";\n      return { ...state,\n        visible: newVisible\n      };\n\n    case CHANGE_MODE:\n      return { ...state,\n        gameMode: state.gameMode === \"normal\" ? \"flagging\" : \"normal\"\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/owenbai/Documents/Development/minesweeper.ai/src/content/reducers/reducer.js"],"names":["NEW_GAME","SHOW_SQUARE","FLAG_SQUARE","CHANGE_MODE","GENERATE_GAME","generateMines","generateNumbersArr","unhideSurroundingSquaresWithZero","isFlaggedComplete","unhideAllSurroundingSquares","initialState","mines","visible","activeGame","firstClick","numRows","numColumns","numMines","gameMode","reducer","state","action","newVisible","JSON","parse","stringify","type","newMines","numbersArr","Array","fill","map","number","row","cols","newMines2","indexSet2","item","coords","split","x","currVisibleState","indexSet","currMines","currNumber","currVisibleState2"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,wBANP;AAQA,SAAQC,aAAR,EAAuBC,kBAAvB,EAA2CC,gCAA3C,EAA6EC,iBAA7E,EAAgGC,2BAAhG,QAAkI,2BAAlI;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CAAC,EAAD,CADY;AAEnBC,EAAAA,OAAO,EAAE,CAAC,EAAD,CAFU;AAGnBC,EAAAA,UAAU,EAAE,KAHO;AAInBC,EAAAA,UAAU,EAAE,KAJO;AAKnBC,EAAAA,OAAO,EAAE,EALU;AAMnBC,EAAAA,UAAU,EAAE,EANO;AAOnBC,EAAAA,QAAQ,EAAE,EAPS;AAQnBC,EAAAA,QAAQ,EAAE;AARS,CAArB;AAWA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGV,YAAzB,EAAuCW,MAAvC,EAA+C;AAC5D,MAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAK,CAACR,OAArB,CAAX,CAAjB;;AAEA,UAAQS,MAAM,CAACK,IAAf;AACE,SAAK1B,QAAL;AACE,YAAM2B,QAAQ,GAAGtB,aAAa,CAACe,KAAK,CAACH,QAAP,EAAiBG,KAAK,CAACL,OAAvB,EAAgCK,KAAK,CAACJ,UAAtC,CAA9B;AACA,YAAMY,UAAU,GAAGtB,kBAAkB,CAACqB,QAAD,EAAWP,KAAK,CAACL,OAAjB,EAA0BK,KAAK,CAACJ,UAAhC,CAArC;AACA,aAAO,EACL,GAAGI,KADE;AAELT,QAAAA,KAAK,EAAEiB,UAFF;AAGLhB,QAAAA,OAAO,EAAE,IAAIiB,KAAJ,CAAUT,KAAK,CAACL,OAAhB,EAAyBe,IAAzB,CAA8B,QAA9B,EAAwCC,GAAxC,CAA4C,MAAMF,KAAK,CAACT,KAAK,CAACJ,UAAP,CAAL,CAAwBc,IAAxB,CAA6B,QAA7B,CAAlD,CAHJ;AAILZ,QAAAA,QAAQ,EAAE,QAJL;AAKLL,QAAAA,UAAU,EAAE,IALP;AAMLC,QAAAA,UAAU,EAAE;AANP,OAAP;AAQF;;AACA,SAAKV,aAAL;AACE,UAAI4B,MAAM,GAAGZ,KAAK,CAACT,KAAN,CAAYU,MAAM,CAACY,GAAnB,EAAwBZ,MAAM,CAACa,IAA/B,CAAb;AACA,UAAIC,SAAS,GAAGf,KAAK,CAACT,KAAtB;;AACA,aAAOqB,MAAM,KAAK,CAAlB,EAAqB;AACnB,cAAML,QAAQ,GAAGtB,aAAa,CAACe,KAAK,CAACH,QAAP,EAAiBG,KAAK,CAACL,OAAvB,EAAgCK,KAAK,CAACJ,UAAtC,CAA9B;AACAmB,QAAAA,SAAS,GAAG7B,kBAAkB,CAACqB,QAAD,EAAWP,KAAK,CAACL,OAAjB,EAA0BK,KAAK,CAACJ,UAAhC,CAA9B;AACAgB,QAAAA,MAAM,GAAIG,SAAS,CAACd,MAAM,CAACY,GAAR,CAAT,CAAsBZ,MAAM,CAACa,IAA7B,CAAV;AACD,OAPH,CAQE;;;AACA,YAAME,SAAS,GAAG7B,gCAAgC,CAACe,UAAD,EAAaa,SAAb,EAAwBd,MAAM,CAACY,GAA/B,EAAoCZ,MAAM,CAACa,IAA3C,EAAiDd,KAAK,CAACL,OAAvD,EAAgEK,KAAK,CAACJ,UAAtE,CAAlD;;AACA,WAAK,IAAIqB,IAAT,IAAiBD,SAAjB,EAA4B;AAC1B,cAAME,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBR,GAAhB,CAAoBS,CAAC,IAAE,CAACA,CAAxB,CAAf;AACAlB,QAAAA,UAAU,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAV,CAAsBA,MAAM,CAAC,CAAD,CAA5B,IAAiC,MAAjC;AACD;;AACD,aAAO,EACL,GAAGlB,KADE;AAELN,QAAAA,UAAU,EAAE,IAFP;AAGLF,QAAAA,OAAO,EAAEU,UAHJ;AAILX,QAAAA,KAAK,EAAEwB;AAJF,OAAP;;AAOF,SAAKlC,WAAL;AACE,YAAMwC,gBAAgB,GAAGnB,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,CAAzB,CADF,CAGE;;AACA,UAAId,KAAK,CAACT,KAAN,CAAYU,MAAM,CAACY,GAAnB,EAAwBZ,MAAM,CAACa,IAA/B,MAAuC,CAAvC,IAA4CO,gBAAgB,KAAK,MAArE,EAA6E;AAC3EnB,QAAAA,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,IAAoC,MAApC;AACA,eAAO,EACL,GAAGd,KADE;AAELP,UAAAA,UAAU,EAAE,KAFP;AAGLD,UAAAA,OAAO,EAAEU;AAHJ,SAAP;AAKD,OAXH,CAaE;;;AACA,UAAImB,gBAAgB,KAAK,QAAzB,EAAmC;AACjCnB,QAAAA,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,IAAoC,MAApC;AACA,cAAMF,MAAM,GAAGZ,KAAK,CAACT,KAAN,CAAYU,MAAM,CAACY,GAAnB,EAAwBZ,MAAM,CAACa,IAA/B,CAAf,CAFiC,CAGjC;;AACA,YAAIF,MAAM,KAAG,CAAb,EAAgB;AACd,gBAAMU,QAAQ,GAAGnC,gCAAgC,CAACe,UAAD,EAAaF,KAAK,CAACT,KAAnB,EAA0BU,MAAM,CAACY,GAAjC,EAAsCZ,MAAM,CAACa,IAA7C,EAAmDd,KAAK,CAACL,OAAzD,EAAkEK,KAAK,CAACJ,UAAxE,CAAjD;;AACA,eAAK,IAAIqB,IAAT,IAAiBK,QAAjB,EAA2B;AACzB,kBAAMJ,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBR,GAAhB,CAAoBS,CAAC,IAAE,CAACA,CAAxB,CAAf;AACAlB,YAAAA,UAAU,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAV,CAAsBA,MAAM,CAAC,CAAD,CAA5B,IAAiC,MAAjC;AACD;AACF;AACF,OAzBH,CA2BE;;;AACA,UAAIG,gBAAgB,KAAK,MAAzB,EAAiC;AAC/B,YAAIE,SAAS,GAAGpB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAK,CAACT,KAArB,CAAX,CAAhB;AACA,cAAMiC,UAAU,GAAGD,SAAS,CAACtB,MAAM,CAACY,GAAR,CAAT,CAAsBZ,MAAM,CAACa,IAA7B,CAAnB;;AACA,YAAG1B,iBAAiB,CAACoC,UAAD,EAAatB,UAAb,EAAyBD,MAAM,CAACY,GAAhC,EAAqCZ,MAAM,CAACa,IAA5C,EAAkDd,KAAK,CAACL,OAAxD,EAAiEK,KAAK,CAACJ,UAAvE,CAApB,EAAwG;AACtG,gBAAM0B,QAAQ,GAAGjC,2BAA2B,CAACa,UAAD,EAAaF,KAAK,CAACT,KAAnB,EAA0BU,MAAM,CAACY,GAAjC,EAAsCZ,MAAM,CAACa,IAA7C,EAAmDd,KAAK,CAACL,OAAzD,EAAkEK,KAAK,CAACJ,UAAxE,CAA5C;;AACA,eAAK,IAAIqB,IAAT,IAAiBK,QAAjB,EAA2B;AACzB,kBAAMJ,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBR,GAAhB,CAAoBS,CAAC,IAAE,CAACA,CAAxB,CAAf,CADyB,CAGzB;;AACA,gBAAIG,SAAS,CAACL,MAAM,CAAC,CAAD,CAAP,CAAT,CAAqBA,MAAM,CAAC,CAAD,CAA3B,MAAkC,CAAtC,EAAyC;AACvChB,cAAAA,UAAU,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAV,CAAsBA,MAAM,CAAC,CAAD,CAA5B,IAAiC,MAAjC;AACA,qBAAO,EACL,GAAGlB,KADE;AAELP,gBAAAA,UAAU,EAAE,KAFP;AAGLD,gBAAAA,OAAO,EAAEU;AAHJ,eAAP;AAKD;;AAEDA,YAAAA,UAAU,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAV,CAAsBA,MAAM,CAAC,CAAD,CAA5B,IAAiC,MAAjC;AACD;AACF;AACF;;AACD,aAAO,EACL,GAAGlB,KADE;AAELR,QAAAA,OAAO,EAAEU;AAFJ,OAAP;;AAIF,SAAKpB,WAAL;AACE,YAAM2C,iBAAiB,GAAGvB,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,CAA1B;AACA,UAAIW,iBAAiB,KAAK,MAA1B,EAAkCvB,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,IAAoC,MAApC;AAClC,UAAIW,iBAAiB,KAAK,QAA1B,EAAoCvB,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,IAAoC,MAApC;AACpC,UAAIW,iBAAiB,KAAK,MAA1B,EAAkCvB,UAAU,CAACD,MAAM,CAACY,GAAR,CAAV,CAAuBZ,MAAM,CAACa,IAA9B,IAAoC,QAApC;AAClC,aAAO,EACL,GAAGd,KADE;AAELR,QAAAA,OAAO,EAAEU;AAFJ,OAAP;;AAIF,SAAKnB,WAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,KAAmB,QAAnB,GAA8B,UAA9B,GAA2C;AAFhD,OAAP;;AAIF;AACE,aAAOE,KAAP;AAvGJ;AAyGD","sourcesContent":["import {\n  NEW_GAME,\n  SHOW_SQUARE,\n  FLAG_SQUARE,\n  CHANGE_MODE,\n  GENERATE_GAME\n} from \"../actions/actionTypes\";\n\nimport {generateMines, generateNumbersArr, unhideSurroundingSquaresWithZero, isFlaggedComplete, unhideAllSurroundingSquares} from \"../../utilities/functions\";\n\nconst initialState = {\n  mines: [[]],\n  visible: [[]],\n  activeGame: false,\n  firstClick: false,\n  numRows: 30,\n  numColumns: 16,\n  numMines: 99,\n  gameMode: \"normal\"\n};\n\nexport default function reducer(state = initialState, action) {\n  var newVisible = JSON.parse(JSON.stringify(state.visible));\n\n  switch (action.type) {\n    case NEW_GAME:\n      const newMines = generateMines(state.numMines, state.numRows, state.numColumns);\n      const numbersArr = generateNumbersArr(newMines, state.numRows, state.numColumns);\n      return {\n        ...state,\n        mines: numbersArr,\n        visible: new Array(state.numRows).fill(\"hidden\").map(() => Array(state.numColumns).fill(\"hidden\")),\n        gameMode: \"normal\",\n        activeGame: true,\n        firstClick: false\n      }\n    //on first click\n    case GENERATE_GAME:\n      let number = state.mines[action.row][action.cols];\n      let newMines2 = state.mines;\n      while (number !== 0) {\n        const newMines = generateMines(state.numMines, state.numRows, state.numColumns);\n        newMines2 = generateNumbersArr(newMines, state.numRows, state.numColumns);\n        number =  newMines2[action.row][action.cols]\n      }\n      //unhide the \"0\" patch\n      const indexSet2 = unhideSurroundingSquaresWithZero(newVisible, newMines2, action.row, action.cols, state.numRows, state.numColumns);\n      for (let item of indexSet2) {\n        const coords = item.split(\",\").map(x=>+x);\n        newVisible[coords[0]][coords[1]]=\"show\";\n      }\n      return {\n        ...state,\n        firstClick: true,\n        visible: newVisible,\n        mines: newMines2\n      }\n  \n    case SHOW_SQUARE:\n      const currVisibleState = newVisible[action.row][action.cols];\n\n      //if hit a hidden mine, display all mines and set activeGame to false\n      if (state.mines[action.row][action.cols]===9 && currVisibleState !== \"flag\") {\n        newVisible[action.row][action.cols]=\"show\";\n        return {\n          ...state,\n          activeGame: false,\n          visible: newVisible\n        }  \n      }\n\n      //unhide current square\n      if (currVisibleState === \"hidden\") {\n        newVisible[action.row][action.cols]=\"show\";\n        const number = state.mines[action.row][action.cols];\n        //unhide all connecting squares with zero \n        if (number===0) {\n          const indexSet = unhideSurroundingSquaresWithZero(newVisible, state.mines, action.row, action.cols, state.numRows, state.numColumns);\n          for (let item of indexSet) {\n            const coords = item.split(\",\").map(x=>+x);\n            newVisible[coords[0]][coords[1]]=\"show\";\n          }\n        }  \n      }\n\n      //shortcut to unhide adjacent squares in flag mode\n      if (currVisibleState === \"show\") {\n        var currMines = JSON.parse(JSON.stringify(state.mines));\n        const currNumber = currMines[action.row][action.cols];\n        if(isFlaggedComplete(currNumber, newVisible, action.row, action.cols, state.numRows, state.numColumns)) {\n          const indexSet = unhideAllSurroundingSquares(newVisible, state.mines, action.row, action.cols, state.numRows, state.numColumns);\n          for (let item of indexSet) {\n            const coords = item.split(\",\").map(x=>+x);\n\n            //lose game if an incorrect cell was flagged\n            if (currMines[coords[0]][coords[1]]===9) {\n              newVisible[coords[0]][coords[1]]=\"show\";\n              return {\n                ...state,\n                activeGame: false,\n                visible: newVisible\n              }  \n            }\n\n            newVisible[coords[0]][coords[1]]=\"show\";\n          }\n        }\n      }\n      return {\n        ...state,\n        visible: newVisible\n      }\n    case FLAG_SQUARE:\n      const currVisibleState2 = newVisible[action.row][action.cols];\n      if (currVisibleState2 === \"show\") newVisible[action.row][action.cols]=\"show\";\n      if (currVisibleState2 === \"hidden\") newVisible[action.row][action.cols]=\"flag\";\n      if (currVisibleState2 === \"flag\") newVisible[action.row][action.cols]=\"hidden\";\n      return {\n        ...state,\n        visible: newVisible\n      }\n    case CHANGE_MODE:\n      return {\n        ...state,\n        gameMode: state.gameMode === \"normal\" ? \"flagging\" : \"normal\"\n      }\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}